import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, o as validate_each_argument, v as validate_slots, e as element, c as claim_element, f as children, h as detach_dev, k as add_location, l as insert_dev, p as destroy_each, j as attr_dev, t as text, g as claim_text, m as append_dev, q as set_data_dev, a as space, b as claim_space, r as empty, u as query_selector_all, n as noop } from './client.d0bc9304.js';

/* src/routes/products/[slug].svelte generated by Svelte v3.23.2 */

const file = "src/routes/products/[slug].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i].label;
	child_ctx[2] = list[i].value;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i].name;
	child_ctx[6] = list[i].file;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i].alt;
	child_ctx[13] = list[i].src;
	return child_ctx;
}

// (36:8) {#if products.images}
function create_if_block_4(ctx) {
	let figure;
	let each_value_3 = /*products*/ ctx[0].images;
	validate_each_argument(each_value_3);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const block = {
		c: function create() {
			figure = element("figure");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			figure = claim_element(nodes, "FIGURE", {});
			var figure_nodes = children(figure);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(figure_nodes);
			}

			figure_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(figure, file, 36, 12, 713);
		},
		m: function mount(target, anchor) {
			insert_dev(target, figure, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(figure, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*products*/ 1) {
				each_value_3 = /*products*/ ctx[0].images;
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(figure, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(figure);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(36:8) {#if products.images}",
		ctx
	});

	return block;
}

// (38:16) {#each products.images as {alt, src}}
function create_each_block_3(ctx) {
	let img;
	let img_alt_value;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { alt: true, src: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "alt", img_alt_value = /*alt*/ ctx[12]);
			if (img.src !== (img_src_value = /*src*/ ctx[13])) attr_dev(img, "src", img_src_value);
			add_location(img, file, 38, 20, 796);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*products*/ 1 && img_alt_value !== (img_alt_value = /*alt*/ ctx[12])) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*products*/ 1 && img.src !== (img_src_value = /*src*/ ctx[13])) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(38:16) {#each products.images as {alt, src}}",
		ctx
	});

	return block;
}

// (48:8) {#if products.features}
function create_if_block_3(ctx) {
	let ul;
	let each_value_2 = /*products*/ ctx[0].features;
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(ul, file, 48, 12, 1059);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*products*/ 1) {
				each_value_2 = /*products*/ ctx[0].features;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(48:8) {#if products.features}",
		ctx
	});

	return block;
}

// (50:16) {#each products.features as feature}
function create_each_block_2(ctx) {
	let li;
	let t_value = /*feature*/ ctx[9] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 50, 20, 1137);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*products*/ 1 && t_value !== (t_value = /*feature*/ ctx[9] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(50:16) {#each products.features as feature}",
		ctx
	});

	return block;
}

// (56:8) {#if products.price}
function create_if_block_2(ctx) {
	let h2;
	let t0;
	let t1_value = /*products*/ ctx[0].price + "";
	let t1;

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text("£");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "£");
			t1 = claim_text(h2_nodes, t1_value);
			h2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 56, 12, 1254);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			append_dev(h2, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*products*/ 1 && t1_value !== (t1_value = /*products*/ ctx[0].price + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(56:8) {#if products.price}",
		ctx
	});

	return block;
}

// (73:8) {#if products.downloads}
function create_if_block_1(ctx) {
	let ul;
	let each_value_1 = /*products*/ ctx[0].downloads;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(ul, file, 73, 12, 1626);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*products*/ 1) {
				each_value_1 = /*products*/ ctx[0].downloads;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(73:8) {#if products.downloads}",
		ctx
	});

	return block;
}

// (75:16) {#each products.downloads as {name, file}}
function create_each_block_1(ctx) {
	let li;
	let a;
	let t0_value = /*name*/ ctx[5] + "";
	let t0;
	let a_href_value;
	let t1;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			a_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = /*file*/ ctx[6]);
			add_location(a, file, 76, 24, 1739);
			add_location(li, file, 75, 20, 1710);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, t0);
			append_dev(li, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*products*/ 1 && t0_value !== (t0_value = /*name*/ ctx[5] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*products*/ 1 && a_href_value !== (a_href_value = /*file*/ ctx[6])) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(75:16) {#each products.downloads as {name, file}}",
		ctx
	});

	return block;
}

// (87:16) {#if value}
function create_if_block(ctx) {
	let dd;
	let t_value = /*value*/ ctx[2] + "";
	let t;

	const block = {
		c: function create() {
			dd = element("dd");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			dd = claim_element(nodes, "DD", {});
			var dd_nodes = children(dd);
			t = claim_text(dd_nodes, t_value);
			dd_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(dd, file, 87, 20, 2036);
		},
		m: function mount(target, anchor) {
			insert_dev(target, dd, anchor);
			append_dev(dd, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*products*/ 1 && t_value !== (t_value = /*value*/ ctx[2] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(dd);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(87:16) {#if value}",
		ctx
	});

	return block;
}

// (85:12) {#each products.specifications as {label, value}}
function create_each_block(ctx) {
	let dt;
	let t_value = /*label*/ ctx[1] + "";
	let t;
	let if_block_anchor;
	let if_block = /*value*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			dt = element("dt");
			t = text(t_value);
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			dt = claim_element(nodes, "DT", {});
			var dt_nodes = children(dt);
			t = claim_text(dt_nodes, t_value);
			dt_nodes.forEach(detach_dev);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			add_location(dt, file, 85, 16, 1971);
		},
		m: function mount(target, anchor) {
			insert_dev(target, dt, anchor);
			append_dev(dt, t);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*products*/ 1 && t_value !== (t_value = /*label*/ ctx[1] + "")) set_data_dev(t, t_value);

			if (/*value*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(dt);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(85:12) {#each products.specifications as {label, value}}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let article;
	let div0;
	let t1;
	let h1;
	let t2_value = /*products*/ ctx[0].name + "";
	let t2;
	let t3;
	let p0;
	let t4_value = /*products*/ ctx[0].teaser + "";
	let t4;
	let t5;
	let t6;
	let t7;
	let div1;
	let h30;
	let t8;
	let t9;
	let p1;
	let t10_value = /*products*/ ctx[0].description + "";
	let t10;
	let t11;
	let t12;
	let h31;
	let t13;
	let t14;
	let dl;
	document.title = title_value = "" + (/*products*/ ctx[0].name + " - KBL Solutions");
	let if_block0 = /*products*/ ctx[0].images && create_if_block_4(ctx);
	let if_block1 = /*products*/ ctx[0].features && create_if_block_3(ctx);
	let if_block2 = /*products*/ ctx[0].price && create_if_block_2(ctx);
	let if_block3 = /*products*/ ctx[0].downloads && create_if_block_1(ctx);
	let each_value = /*products*/ ctx[0].specifications;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			article = element("article");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t1 = space();
			h1 = element("h1");
			t2 = text(t2_value);
			t3 = space();
			p0 = element("p");
			t4 = text(t4_value);
			t5 = space();
			if (if_block1) if_block1.c();
			t6 = space();
			if (if_block2) if_block2.c();
			t7 = space();
			div1 = element("div");
			h30 = element("h3");
			t8 = text("Description");
			t9 = space();
			p1 = element("p");
			t10 = text(t10_value);
			t11 = space();
			if (if_block3) if_block3.c();
			t12 = space();
			h31 = element("h3");
			t13 = text("Specifications");
			t14 = space();
			dl = element("dl");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-10lonmj\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			article = claim_element(nodes, "ARTICLE", {});
			var article_nodes = children(article);
			div0 = claim_element(article_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (if_block0) if_block0.l(div0_nodes);
			t1 = claim_space(div0_nodes);
			h1 = claim_element(div0_nodes, "H1", {});
			var h1_nodes = children(h1);
			t2 = claim_text(h1_nodes, t2_value);
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			p0 = claim_element(div0_nodes, "P", {});
			var p0_nodes = children(p0);
			t4 = claim_text(p0_nodes, t4_value);
			p0_nodes.forEach(detach_dev);
			t5 = claim_space(div0_nodes);
			if (if_block1) if_block1.l(div0_nodes);
			t6 = claim_space(div0_nodes);
			if (if_block2) if_block2.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t7 = claim_space(article_nodes);
			div1 = claim_element(article_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h30 = claim_element(div1_nodes, "H3", {});
			var h30_nodes = children(h30);
			t8 = claim_text(h30_nodes, "Description");
			h30_nodes.forEach(detach_dev);
			t9 = claim_space(div1_nodes);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t10 = claim_text(p1_nodes, t10_value);
			p1_nodes.forEach(detach_dev);
			t11 = claim_space(div1_nodes);
			if (if_block3) if_block3.l(div1_nodes);
			t12 = claim_space(div1_nodes);
			h31 = claim_element(div1_nodes, "H3", {});
			var h31_nodes = children(h31);
			t13 = claim_text(h31_nodes, "Specifications");
			h31_nodes.forEach(detach_dev);
			t14 = claim_space(div1_nodes);
			dl = claim_element(div1_nodes, "DL", {});
			var dl_nodes = children(dl);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(dl_nodes);
			}

			dl_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			article_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 43, 8, 883);
			add_location(p0, file, 44, 8, 916);
			attr_dev(div0, "class", "hero svelte-ivpxio");
			add_location(div0, file, 33, 4, 651);
			add_location(h30, file, 68, 8, 1447);
			add_location(p1, file, 69, 8, 1476);
			add_location(h31, file, 82, 8, 1856);
			add_location(dl, file, 83, 8, 1888);
			attr_dev(div1, "class", "content svelte-ivpxio");
			add_location(div1, file, 66, 4, 1416);
			add_location(article, file, 31, 0, 636);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, article, anchor);
			append_dev(article, div0);
			if (if_block0) if_block0.m(div0, null);
			append_dev(div0, t1);
			append_dev(div0, h1);
			append_dev(h1, t2);
			append_dev(div0, t3);
			append_dev(div0, p0);
			append_dev(p0, t4);
			append_dev(div0, t5);
			if (if_block1) if_block1.m(div0, null);
			append_dev(div0, t6);
			if (if_block2) if_block2.m(div0, null);
			append_dev(article, t7);
			append_dev(article, div1);
			append_dev(div1, h30);
			append_dev(h30, t8);
			append_dev(div1, t9);
			append_dev(div1, p1);
			append_dev(p1, t10);
			append_dev(div1, t11);
			if (if_block3) if_block3.m(div1, null);
			append_dev(div1, t12);
			append_dev(div1, h31);
			append_dev(h31, t13);
			append_dev(div1, t14);
			append_dev(div1, dl);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(dl, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*products*/ 1 && title_value !== (title_value = "" + (/*products*/ ctx[0].name + " - KBL Solutions"))) {
				document.title = title_value;
			}

			if (/*products*/ ctx[0].images) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(div0, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*products*/ 1 && t2_value !== (t2_value = /*products*/ ctx[0].name + "")) set_data_dev(t2, t2_value);
			if (dirty & /*products*/ 1 && t4_value !== (t4_value = /*products*/ ctx[0].teaser + "")) set_data_dev(t4, t4_value);

			if (/*products*/ ctx[0].features) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					if_block1.m(div0, t6);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*products*/ ctx[0].price) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_2(ctx);
					if_block2.c();
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*products*/ 1 && t10_value !== (t10_value = /*products*/ ctx[0].description + "")) set_data_dev(t10, t10_value);

			if (/*products*/ ctx[0].downloads) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_1(ctx);
					if_block3.c();
					if_block3.m(div1, t12);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (dirty & /*products*/ 1) {
				each_value = /*products*/ ctx[0].specifications;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(dl, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(article);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	// the `slug` parameter is available because
	// this file is called [slug].svelte
	const res = await this.fetch(`products/${params.slug}.json`);

	const data = await res.json();

	if (res.status === 200) {
		return { products: data };
	} else {
		this.error(res.status, data.message);
	}
}

function instance($$self, $$props, $$invalidate) {
	let { products } = $$props;
	const writable_props = ["products"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", $$slots, []);

	$$self.$set = $$props => {
		if ("products" in $$props) $$invalidate(0, products = $$props.products);
	};

	$$self.$capture_state = () => ({ preload, products });

	$$self.$inject_state = $$props => {
		if ("products" in $$props) $$invalidate(0, products = $$props.products);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [products];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { products: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*products*/ ctx[0] === undefined && !("products" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'products'");
		}
	}

	get products() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set products(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3NsdWddLjgxZWQ0MTc4LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3Byb2R1Y3RzL1tzbHVnXS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG5cdGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHsgcGFyYW1zLCBxdWVyeSB9KSB7XG5cdFx0Ly8gdGhlIGBzbHVnYCBwYXJhbWV0ZXIgaXMgYXZhaWxhYmxlIGJlY2F1c2Vcblx0XHQvLyB0aGlzIGZpbGUgaXMgY2FsbGVkIFtzbHVnXS5zdmVsdGVcblx0XHRjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGBwcm9kdWN0cy8ke3BhcmFtcy5zbHVnfS5qc29uYCk7XG5cdFx0Y29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cdFx0aWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuXHRcdFx0cmV0dXJuIHsgcHJvZHVjdHM6IGRhdGEgfTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5lcnJvcihyZXMuc3RhdHVzLCBkYXRhLm1lc3NhZ2UpO1xuXHRcdH1cblx0fVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgcHJvZHVjdHM7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAgIC5oZXJvIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICB9XG4gICAgLmNvbnRlbnQge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjZmN2Y5O1xuICAgIH1cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPntwcm9kdWN0cy5uYW1lfSAtIEtCTCBTb2x1dGlvbnM8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGFydGljbGU+XG5cbiAgICA8ZGl2IGNsYXNzPVwiaGVyb1wiPlxuXG4gICAgICAgIHsjaWYgcHJvZHVjdHMuaW1hZ2VzfVxuICAgICAgICAgICAgPGZpZ3VyZT5cbiAgICAgICAgICAgICAgICB7I2VhY2ggcHJvZHVjdHMuaW1hZ2VzIGFzIHthbHQsIHNyY319XG4gICAgICAgICAgICAgICAgICAgIDxpbWcge2FsdH0ge3NyY30+XG4gICAgICAgICAgICAgICAgey9lYWNofVxuICAgICAgICAgICAgPC9maWd1cmU+XG4gICAgICAgIHsvaWZ9XG5cbiAgICAgICAgPGgxPntwcm9kdWN0cy5uYW1lfTwvaDE+XG4gICAgICAgIDxwPntwcm9kdWN0cy50ZWFzZXJ9PC9wPlxuXG4gICAgICAgIDwhLS0gVXNlIFN2ZWx0ZSB0byBsb29wIG92ZXIgZmVhdHVyZXMgKG9ubHkgc2hvdyBpZiBwcmVzZW50KSAtLT5cbiAgICAgICAgeyNpZiBwcm9kdWN0cy5mZWF0dXJlc31cbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICB7I2VhY2ggcHJvZHVjdHMuZmVhdHVyZXMgYXMgZmVhdHVyZX1cbiAgICAgICAgICAgICAgICAgICAgPGxpPntmZWF0dXJlfTwvbGk+XG4gICAgICAgICAgICAgICAgey9lYWNofVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgey9pZn1cblxuICAgICAgICB7I2lmIHByb2R1Y3RzLnByaWNlfVxuICAgICAgICAgICAgPGgyPsKje3Byb2R1Y3RzLnByaWNlfTwvaDI+XG4gICAgICAgIHsvaWZ9XG5cbiAgICAgICAgPCEtLVxuICAgICAgICAgICAgUXVpY2sgcXVvdGUgcmVxdWVzdCBmb3JtXG4gICAgICAgICAgICAtIFRoaXMgY291bGQgYmUgYSBjb21wb25lbnQ/XG4gICAgICAgIC0tPlxuXG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxuXG4gICAgICAgIDxoMz5EZXNjcmlwdGlvbjwvaDM+XG4gICAgICAgIDxwPntwcm9kdWN0cy5kZXNjcmlwdGlvbn08L3A+XG5cbiAgICAgICAgPCEtLSBVc2UgU3ZlbHRlIHRvIGxvb3Agb3ZlciBkb3dubG9hZHMgKG9ubHkgc2hvdyBpZiBwcmVzZW50KSAtLT5cbiAgICAgICAgeyNpZiBwcm9kdWN0cy5kb3dubG9hZHN9XG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgeyNlYWNoIHByb2R1Y3RzLmRvd25sb2FkcyBhcyB7bmFtZSwgZmlsZX19XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2ZpbGV9PntuYW1lfTwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICB7L2lmfVxuXG4gICAgICAgIDxoMz5TcGVjaWZpY2F0aW9uczwvaDM+XG4gICAgICAgIDxkbD5cbiAgICAgICAgICAgIHsjZWFjaCBwcm9kdWN0cy5zcGVjaWZpY2F0aW9ucyBhcyB7bGFiZWwsIHZhbHVlfX1cbiAgICAgICAgICAgICAgICA8ZHQ+e2xhYmVsfTwvZHQ+XG4gICAgICAgICAgICAgICAgeyNpZiB2YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgPGRkPiB7dmFsdWV9PC9kZD5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L2RsPlxuXG4gICAgPC9kaXY+XG5cbiAgICA8IS0tXG4gICAgICAgIFNpZGViYXIgKGFzaWRlKVxuICAgICAgICAtIFRoaXMgY291bGQgYmUgYSBjb21wb25lbnQ/XG4gICAgLS0+XG5cbjwvYXJ0aWNsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUNBcUN1QixHQUFRLElBQUMsTUFBTTs7OztrQ0FBcEIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQ0FBQyxHQUFRLElBQUMsTUFBTTs7OztpQ0FBcEIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OztzQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztpQ0FZQyxHQUFRLElBQUMsUUFBUTs7OztrQ0FBdEIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQ0FBQyxHQUFRLElBQUMsUUFBUTs7OztpQ0FBdEIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OztzQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFDRyxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0VBQVAsR0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFNZCxHQUFRLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VFQUFkLEdBQVEsSUFBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUNBa0JULEdBQVEsSUFBQyxTQUFTOzs7O2tDQUF2QixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dDQUFDLEdBQVEsSUFBQyxTQUFTOzs7O2lDQUF2QixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O3NDQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFFa0IsR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQ0FBWCxHQUFJOzs7Ozs7Ozs7OzttRUFBRyxHQUFJOzsyRUFBWCxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFXWCxHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0VBQUwsR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQUZWLEdBQUs7OzswQkFDTCxHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrRUFETCxHQUFLOztpQkFDTCxHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkEzQ2IsR0FBUSxJQUFDLElBQUk7Ozs7NkJBQ2QsR0FBUSxJQUFDLE1BQU07Ozs7Ozs7Ozs7OEJBeUJmLEdBQVEsSUFBQyxXQUFXOzs7Ozs7OzttREF6Q3ZCLEdBQVEsSUFBQyxJQUFJOzhCQU9ULEdBQVEsSUFBQyxNQUFNOzhCQVlmLEdBQVEsSUFBQyxRQUFROzhCQVFqQixHQUFRLElBQUMsS0FBSzs4QkFpQmQsR0FBUSxJQUFDLFNBQVM7K0JBWVosR0FBUSxJQUFDLGNBQWM7Ozs7Z0NBQTVCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUZBeERULEdBQVEsSUFBQyxJQUFJOzs7O29CQU9ULEdBQVEsSUFBQyxNQUFNOzs7Ozs7Ozs7Ozs7O3VFQVFmLEdBQVEsSUFBQyxJQUFJO3VFQUNkLEdBQVEsSUFBQyxNQUFNOztvQkFHZCxHQUFRLElBQUMsUUFBUTs7Ozs7Ozs7Ozs7OztvQkFRakIsR0FBUSxJQUFDLEtBQUs7Ozs7Ozs7Ozs7Ozs7eUVBY2YsR0FBUSxJQUFDLFdBQVc7O29CQUduQixHQUFRLElBQUMsU0FBUzs7Ozs7Ozs7Ozs7Ozs7OEJBWVosR0FBUSxJQUFDLGNBQWM7Ozs7K0JBQTVCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBbkZLLE9BQU8sR0FBRyxNQUFNLEVBQUUsS0FBSzs7O09BR3RDLEdBQUcsU0FBUyxJQUFJLENBQUMsS0FBSyxhQUFhLE1BQU0sQ0FBQyxJQUFJOztPQUM5QyxJQUFJLFNBQVMsR0FBRyxDQUFDLElBQUk7O0tBQ3ZCLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRztXQUNaLFFBQVEsRUFBRSxJQUFJOztFQUV2QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU87Ozs7O09BTTFCLFFBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
