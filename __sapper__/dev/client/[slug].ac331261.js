import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, o as validate_each_argument, v as validate_slots, e as element, a as space, t as text, c as claim_element, f as children, b as claim_space, g as claim_text, h as detach_dev, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, q as set_data_dev, n as noop, p as destroy_each } from './client.d0bc9304.js';

/* src/routes/products/landing/[slug].svelte generated by Svelte v3.23.2 */

const file = "src/routes/products/landing/[slug].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (22:4) {#each group.products as product}
function create_each_block(ctx) {
	let li;
	let a;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let h2;
	let t1_value = /*product*/ ctx[1].name + "";
	let t1;
	let t2;
	let p;
	let t3;
	let t4_value = /*product*/ ctx[1].price + "";
	let t4;
	let a_href_value;
	let t5;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			img = element("img");
			t0 = space();
			h2 = element("h2");
			t1 = text(t1_value);
			t2 = space();
			p = element("p");
			t3 = text("From £");
			t4 = text(t4_value);
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true });
			var a_nodes = children(a);
			img = claim_element(a_nodes, "IMG", { src: true, alt: true });
			t0 = claim_space(a_nodes);
			h2 = claim_element(a_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, t1_value);
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(a_nodes);
			p = claim_element(a_nodes, "P", {});
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, "From £");
			t4 = claim_text(p_nodes, t4_value);
			p_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t5 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*group*/ ctx[0].images[0].src)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*group*/ ctx[0].images[0].alt);
			add_location(img, file, 26, 4, 624);
			add_location(h2, file, 28, 4, 689);
			add_location(p, file, 29, 4, 717);
			attr_dev(a, "href", a_href_value = "/products/" + /*product*/ ctx[1].slug);
			add_location(a, file, 23, 3, 521);
			add_location(li, file, 22, 8, 513);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, img);
			append_dev(a, t0);
			append_dev(a, h2);
			append_dev(h2, t1);
			append_dev(a, t2);
			append_dev(a, p);
			append_dev(p, t3);
			append_dev(p, t4);
			append_dev(li, t5);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*group*/ 1 && img.src !== (img_src_value = /*group*/ ctx[0].images[0].src)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*group*/ 1 && img_alt_value !== (img_alt_value = /*group*/ ctx[0].images[0].alt)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*group*/ 1 && t1_value !== (t1_value = /*product*/ ctx[1].name + "")) set_data_dev(t1, t1_value);
			if (dirty & /*group*/ 1 && t4_value !== (t4_value = /*product*/ ctx[1].price + "")) set_data_dev(t4, t4_value);

			if (dirty & /*group*/ 1 && a_href_value !== (a_href_value = "/products/" + /*product*/ ctx[1].slug)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(22:4) {#each group.products as product}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let h1;
	let t0_value = /*group*/ ctx[0].name + "";
	let t0;
	let t1;
	let ul;
	let each_value = /*group*/ ctx[0].products;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, t0_value);
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 18, 0, 439);
			add_location(ul, file, 20, 0, 462);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*group*/ 1 && t0_value !== (t0_value = /*group*/ ctx[0].name + "")) set_data_dev(t0, t0_value);

			if (dirty & /*group*/ 1) {
				each_value = /*group*/ ctx[0].products;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	// the `slug` parameter is available because
	// this file is called [slug].svelte
	const res = await this.fetch(`products/landing/${params.slug}.json`);

	const data = await res.json();

	if (res.status === 200) {
		return { group: data };
	} else {
		this.error(res.status, data.message);
	}
}

function instance($$self, $$props, $$invalidate) {
	let { group } = $$props;
	const writable_props = ["group"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", $$slots, []);

	$$self.$set = $$props => {
		if ("group" in $$props) $$invalidate(0, group = $$props.group);
	};

	$$self.$capture_state = () => ({ preload, group });

	$$self.$inject_state = $$props => {
		if ("group" in $$props) $$invalidate(0, group = $$props.group);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [group];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { group: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*group*/ ctx[0] === undefined && !("group" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'group'");
		}
	}

	get group() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set group(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3NsdWddLmFjMzMxMjYxLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3Byb2R1Y3RzL2xhbmRpbmcvW3NsdWddLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cblx0ZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoeyBwYXJhbXMsIHF1ZXJ5IH0pIHtcblx0XHQvLyB0aGUgYHNsdWdgIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgYmVjYXVzZVxuICAgICAgICAvLyB0aGlzIGZpbGUgaXMgY2FsbGVkIFtzbHVnXS5zdmVsdGVcblx0XHRjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGBwcm9kdWN0cy9sYW5kaW5nLyR7cGFyYW1zLnNsdWd9Lmpzb25gKTtcblx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcblx0XHRpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG5cdFx0XHRyZXR1cm4geyBncm91cDogZGF0YSB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmVycm9yKHJlcy5zdGF0dXMsIGRhdGEubWVzc2FnZSk7XG5cdFx0fVxuXHR9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cblx0ZXhwb3J0IGxldCBncm91cDtcbjwvc2NyaXB0PlxuXG48aDE+e2dyb3VwLm5hbWV9PC9oMT5cblxuPHVsPlxuICAgIHsjZWFjaCBncm91cC5wcm9kdWN0cyBhcyBwcm9kdWN0fVxuICAgICAgICA8bGk+XG5cdFx0XHQ8YSBocmVmPVwiL3Byb2R1Y3RzL3twcm9kdWN0LnNsdWd9XCI+XG5cblx0XHRcdFx0PCEtLSBUaGUgWzBdIG1lYW5zIGdldCB0aGUgZmlyc3QgaW1hZ2UgZnJvbSB0aGUgYXJyYXkgLS0+XG5cdFx0XHRcdDxpbWcgc3JjPXtncm91cC5pbWFnZXNbMF0uc3JjfSBhbHQ9e2dyb3VwLmltYWdlc1swXS5hbHR9IC8+XG5cblx0XHRcdFx0PGgyPntwcm9kdWN0Lm5hbWV9PC9oMj5cblx0XHRcdFx0PHA+RnJvbSDCo3twcm9kdWN0LnByaWNlfTwvcD5cblx0XHRcdDwvYT5cbiAgICAgICAgPC9saT5cbiAgICB7L2VhY2h9XG48L3VsPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0QkE0QlMsR0FBTyxJQUFDLElBQUk7Ozs7OzRCQUNQLEdBQU8sSUFBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhDQUhiLEdBQUssSUFBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUc7a0RBQU8sR0FBSyxJQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRzs7OztpRUFIcEMsR0FBTyxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7OztxRUFHckIsR0FBSyxJQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRzs7OzsyRUFBTyxHQUFLLElBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHOzs7O21FQUVsRCxHQUFPLElBQUMsSUFBSTttRUFDUCxHQUFPLElBQUMsS0FBSzs7MEZBTkosR0FBTyxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBTDlCLEdBQUssSUFBQyxJQUFJOzs7OzRCQUdKLEdBQUssSUFBQyxRQUFROzs7O2dDQUFuQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUVBSEwsR0FBSyxJQUFDLElBQUk7OzsyQkFHSixHQUFLLElBQUMsUUFBUTs7OzsrQkFBbkIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7ZUFwQmEsT0FBTyxHQUFHLE1BQU0sRUFBRSxLQUFLOzs7T0FHdEMsR0FBRyxTQUFTLElBQUksQ0FBQyxLQUFLLHFCQUFxQixNQUFNLENBQUMsSUFBSTs7T0FDdEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJOztLQUN2QixHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUc7V0FDWixLQUFLLEVBQUUsSUFBSTs7RUFFcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPOzs7OztPQU0xQixLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
